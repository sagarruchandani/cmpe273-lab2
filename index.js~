var connect = require('connect');
var login = require('./login');

var app = connect();

app.use(connect.json()); // Parse JSON request body into `request.body`
app.use(connect.urlencoded()); // Parse form in request body into `request.body`
app.use(connect.cookieParser()); // Parse cookies in the request headers into `request.cookies`
app.use(connect.query()); // Parse query string into `request.query`

app.use('/', main);

function main(request, response, next) {
	switch (request.method) {
		case 'GET': get(request, response); break;
		case 'POST': post(request, response); break;
		case 'DELETE': del(request, response); break;
		case 'PUT': put(request, response); break;
	}
};

function get(request, response) {
	var cookies = request.cookies;
	console.log(cookies);
	if ('session_id' in cookies) {
		var sid = cookies['session_id'];
		if ( login.isLoggedIn(sid) ) {
			response.setHeader('Set-Cookie', 'session_id=' + sid);
			response.end(login.hello(sid));	
		} else {
			response.end("Invalid session_id! Please login again\n");
		}
	} else {
		response.end("Please login via HTTP POST\n");
	}
};

function post(request, response) {
	// TODO: read 'name and email from the request.body'
	var name = request.body.name;
	var email = request.body.email;
	//console.log("test---"+name);
	var newSessionId = login.login(name, email);
	// TODO: set new  id to the 'session_id' cookie in the response
	response.setHeader('Set-Cookie', 'session_id=' + newSessionId);
	// replace "Logged In" response with response.end(login.hello(newSessionId));
	response.end(login.hello(newSessionId));
};

function del(request, response) {
	console.log("DELETE:: Logout from the server");
 	// TODO: remove session id via login.logout(xxx)
 	// No need to set session id in the response cookies since you just logged out!
	
	var cookies = request.cookies;
        console.log("Delete Function Cookie :" + cookies);
        var sid = cookies['session_id'];
        if ( login.isLoggedIn(sid) ) {
        login.logout(sid);

        response.end('Logged out from the server\n');
        }
        else{
        response.end('User not logged in\n');
        }
  	//response.end('Logged out from the server\n');
};

function put(request, response) {
	
console.log("PUT:: Re-generate new seesion_id for the same user");
	var cookies = request.cookies;
	console.log(cookies);
	if ('session_id' in cookies) {
		var sessionId = cookies['session_id'];
		
		if ( login.isLoggedIn(sessionId) ) {
			var name = login.name(sessionId);
			var email = login.email(sessionId);
			login.logout(sessionId);

 	 		if ( login.isLoggedIn(sessionId) ) {	
				response.end("Not able to refresh sessions\n");
			}
			else {
				var newSessionId = login.login(name, email);
				
				response.setHeader('Set-Cookie', 'session_id=' + newSessionId);
				console.log("PUT:: Old Session Id:" + sessionId);
				console.log("PUT:: New Session Id:" + newSessionId);
				response.end("Re-freshed session id\n");
			
			}
		}
		else {
			response.end("Invalid Session Id! Please login again\n");
		}
	}
	else {
			response.end("Invalid Put Request\n");
	}





/*
console.log("PUT:: Re-generate new seesion_id for the same user");
	var cookies = request.cookies;
        var sid = cookies.session_id;
	//var oldSessionId = login.login(name, email);
	console.log(" Cookie :" + cookies);
	//console.log(" Old Sid :" + oldSessionId);
	console.log("New Sid :" + sid);
	//var name = login.sessionMap[sid].name;
	//console.log("Name :" + name);
	//var email = login.sessionMap[sid].email;  
	//console.log("Email :" + email);
	//var newSessionId = login.login(name, email);
        response.setHeader('Set-Cookie','session_id='+ sid);
        //response.end(login.hello(sid));
	response.end("Re-freshed session id\n");
*/
};

app.listen(8000);

console.log("Node.JS server running at 8000...");
